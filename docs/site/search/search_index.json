{"config":{"lang":["pt"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Cardapio","text":"<p>Documenta\u00e7\u00e3o backend para utiliza\u00e7\u00e3o dos recursos e auxilio na cria\u00e7\u00e3o de novas rotas</p>"},{"location":"routes/acesso_admin/","title":"Acesso Admin","text":"<p>Esta ResfulAPI lida com a autentica\u00e7\u00e3o do usu\u00e1rio trabalhando com dados de acesso enviados pela requisi\u00e7\u00e3o para se obter o token de acesso.</p> <p>Outras formas de acesso a outros recusos necessitam do token passado pelo header X-Api-Key o mesmo s\u00f3 pode ser obtido por autentica\u00e7\u00e3o nesta rota.</p>"},{"location":"routes/acesso_admin/#acesso_admin","title":"/acesso_admin","text":""},{"location":"routes/acesso_admin/#post","title":"POST","text":"<p>Realiza a autentica\u00e7\u00e3o e se bem sucedido recupera o token</p> NOME DESCRICAO TIPO VALOR DE EXEMPLO email Endere\u00e7o de email de acesso String 'fulano@ciclano.com' senha Uma senha para se autenticar na plataforma. String 'minha_senha_secreta' Exemplo de envio<pre><code>from requests import Session\nimport json\n\nURL = 'http://localhost:8080'\ns = Session()\n\nobj = {\n   'email': 'beltrano@example.com', 'senha': 'minha_super_senha'\n}\narquivo = open('imagem.jpg', 'rb)\n\n# Realizando o envio\ns.post(\n    URL + '/acesso_admin',\n    data={'dados': json.dumps(obj) }\n)\n</code></pre> Retorno<pre><code>{\n    'token': 'dfadc855249b015fd2bb015c0b099b2189c58748'\n}\n</code></pre>"},{"location":"routes/cardapio_api/","title":"Cardapio","text":"<p>Esta ResfulAPI lida com a manuten\u00e7\u00e3o dos itens, como listagem, inser\u00e7\u00e3o, atualiza\u00e7\u00e3o e exclus\u00e3o dos mesmos no sistema. Interagir com esta API necessita estar autenticado pois lida com \u00e1reas sensiveis da aplica\u00e7\u00e3o como inser\u00e7\u00e3o de dados.</p> <p>Todas as rotas aqui (com excess\u00e3o de GET) necessitam do token voc\u00ea pode consegui-lo por aqui. Lembre-se de pass\u00e1-lo no Header junto ao X-Api-Key.</p>"},{"location":"routes/cardapio_api/#cardapio_1","title":"/cardapio","text":""},{"location":"routes/cardapio_api/#get","title":"GET","text":"<p>Recupera itens baseado no parametro informado.</p> <ul> <li>categoria: Retorna itens que atendam a esta categoria</li> <li>todas: Caso enviado retorna todas as categorias disponiveis.</li> <li>tipos: Retorna os tipos de categorias disponiveis</li> </ul> Exemplo de envio<pre><code>from requests import Session\nimport json\n\nURL = 'http://localhost:8080'\ns = Session()\n\n# Realizando o envio\ns.get( URL + '/cardapio?categoria=Caf\u00e9')\n</code></pre> Retorno<pre><code>[\n {\n  'id': 1,\n  'nome': 'Caf\u00e9',\n  'categoria': 'Caf\u00e9',\n  'descricao': 'Expresso curto, tradicional: fraco, m\u00e9dio, forte!',\n  'thumb': 'static/imagens/pequeno/89318b7008da0bb9086ba55f7911681f9ade367b.jpg',\n  'normal': 'static/imagens/medio/89318b7008da0bb9086ba55f7911681f9ade367b.jpg',\n  'meu_favorito': false,\n  'total_favoritos': 10,\n }\n]\n</code></pre> Exemplo de envio com tipos<pre><code>from requests import Session\nimport json\n\nURL = 'http://localhost:8080'\ns = Session()\n\n# Realizando o envio\ns.get( URL + '/cardapio?tipos=true')\n</code></pre> Retorno<pre><code>[\n ['FreeBreakfast', 'Caf\u00e9'],\n ['Fastfood', 'Sucos'],\n ['EmojiFoodBeverage', 'Ch\u00e1'],\n ['WineBar', 'Alco\u00f3licos']\n]\n</code></pre>"},{"location":"routes/cardapio_api/#post","title":"POST","text":"<p>Cria um novo item no cardapio</p> NOME DESCRICAO TIPO VALOR DE EXEMPLO nome Nome do item a ser inserido String 'Capuccino' categoria Define a categoria em que o item ir\u00e1 participar, \u00e9 aceita no momento uma das categorias do exemplo String 'Caf\u00e9', 'Ch\u00e1', 'Sucos', 'Alco\u00f3licos' descricao Necessario para descrever detalhes do item. String 'Expresso curto' arquivo Este \u00e9 um campo no body onde tem a indica\u00e7\u00e3o de um arquivo a ser a representa\u00e7\u00e3o da imagem do item. File File('imagem.jpg') Exemplo de envio<pre><code>from requests import Session\nimport json\n\nURL = 'http://localhost:8080'\ns = Session()\ns.headers.update({'X-Api-Key': 'TOKEN_DE_AUTENTICACAO'})\n\nobj = {\n   'nome': 'Capuccino', 'categoria': 'Caf\u00e9', 'descricao': 'Expresso curto',\n}\narquivo = open('imagem.jpg', 'rb)\n\n# Realizando o envio\ns.post(\n    URL + '/cardapio',\n    data={'dados': json.dumps(obj) },\n    file = {'arquivo': arquivo }\n)\n</code></pre> Retorno<pre><code>{\n    'id': 1,\n    'nome': 'Capuccino',\n    'categoria': 'Caf\u00e9',\n    'descricao': 'Expresso curto',\n    'thumb': 'static/imagens/pequeno/427b834de1d5dd430439b13fdf8631606cbe1d42.jpg',\n    'normal': 'static/imagens/medio/427b834de1d5dd430439b13fdf8631606cbe1d42.jpg',\n    'meu_favorito': false,\n    'total_favoritos': 0,\n}\n</code></pre>"},{"location":"routes/cardapio_api/#put","title":"PUT","text":"<p>Realiza a atualiza\u00e7\u00e3o de um item, descri\u00e7\u00e3o nome e categoria s\u00e3o alterados neste envio.</p> NOME DESCRICAO TIPO VALOR DE EXEMPLO id O identificador do item a ser alterado. Integer 1 nome Novo nome do item a ser atualizado String 'Capuccino' categoria Define a categoria em que o item ir\u00e1 participar, \u00e9 aceita no momento uma das categorias do exemplo String 'Caf\u00e9', 'Ch\u00e1', 'Sucos', 'Alco\u00f3licos' descricao Necessario para descrever detalhes do item. String 'Expresso curto' Exemplo de envio<pre><code>from requests import Session\nimport json\n\nURL = 'http://localhost:8080'\ns = Session()\ns.headers.update({'X-Api-Key': 'TOKEN_DE_AUTENTICACAO'})\n\nobj = {\n    'id': 1,\n   'nome': 'Capuccino',\n   'categoria': 'Sucos',\n   'descricao': 'Expresso curto com leite',\n}\n\n# Realizando o envio\ns.put(\n    URL + '/cardapio',\n    data={'dados': json.dumps(obj) },\n)\n</code></pre> Retorno<pre><code>{\n    'id': 1,\n    'nome': 'Capuccino',\n    'categoria': 'Sucos',\n    'descricao': 'Expresso curto com leite',\n    'thumb': 'static/imagens/pequeno/427b834de1d5dd430439b13fdf8631606cbe1d42.jpg',\n    'normal': 'static/imagens/medio/427b834de1d5dd430439b13fdf8631606cbe1d42.jpg',\n    'meu_favorito': false,\n    'total_favoritos': 0,\n}\n</code></pre>"},{"location":"routes/cardapio_api/#patch","title":"PATCH","text":"<p>Realiza a marca\u00e7\u00e3o/desmarca\u00e7\u00e3o de um item como favorito, \u00e9 poss\u00edvel enviar um comentario sobre o item.</p> NOME DESCRICAO TIPO VALOR DE EXEMPLO id O identificador do item a ser favoritado. Integer 1 id_identificador Um identificador unico para o cliente. Isto ir\u00e1 permitir que o cliente marque/desmarque o item como favorito. String (uuidV4) '68aeea48-add6-43c1-a4f9-1cbf40fc7344' comentario O coment\u00e1rio sobre o item, pode ser enviado e/ou n\u00e3o, mas deve seguir como string. String 'Muito bom.' Exemplo de envio<pre><code>from requests import Session\nimport json\n\nURL = 'http://localhost:8080'\ns = Session()\ns.headers.update({'X-Api-Key': 'TOKEN_DE_AUTENTICACAO'})\n\nobj = {\n    'id': 1,\n   'id_identificador': '68aeea48-add6-43c1-a4f9-1cbf40fc7344',\n   'comentario': 'Muito bom, parab\u00e9ns',\n}\n\n# Realizando o envio\ns.patch(\n    URL + '/cardapio',\n    data={'dados': json.dumps(obj) },\n)\n</code></pre> Retorno<pre><code>{\n    'id': 1,\n    'nome': 'Capuccino',\n    'categoria': 'Sucos',\n    'descricao': 'Expresso curto com leite',\n    'thumb': 'static/imagens/pequeno/427b834de1d5dd430439b13fdf8631606cbe1d42.jpg',\n    'normal': 'static/imagens/medio/427b834de1d5dd430439b13fdf8631606cbe1d42.jpg',\n    'meu_favorito': false,\n    'total_favoritos': 0,\n}\n</code></pre>"},{"location":"routes/cardapio_api/#delete","title":"DELETE","text":"<p>Realiza a exclus\u00e3o de um item.</p> NOME DESCRICAO TIPO VALOR DE EXEMPLO id O identificador do item a ser excluido. Integer 1 Exemplo de envio<pre><code>from requests import Session\nimport json\n\nURL = 'http://localhost:8080'\ns = Session()\ns.headers.update({'X-Api-Key': 'TOKEN_DE_AUTENTICACAO'})\n\nobj = {\n    'id': 1,\n}\n\n# Realizando o envio\ns.delete(\n    URL + '/cardapio',\n    data={'dados': json.dumps(obj) },\n)\n</code></pre> Retorno<pre><code>{'sucesso': 'Item excluido com sucesso.'}\n</code></pre>"},{"location":"utils/autenticator/","title":"Class Autenticator","text":""},{"location":"utils/autenticator/#utils.authenticator.Autenticator","title":"Autenticator","text":"<p>Esta classe permite ao utilizador usa-la para autenticar usuarios com acesso as rotas. Ela \u00e9 um decorador e assim pode ser usada abaixo de .route para validar o usuario.  A forma como voc\u00ea deve escrever este autenticado \u00e9 entre o decorador @app e a funcao  a ser executada pela rota. Ele ir\u00e1 verificar se o usu\u00e1rio esta autenticado e caso n\u00e3o  esteja ir\u00e1 retornar um json com a mensagem de erro.</p> <p>@app.route('/')</p> <p>@Autenticator()</p> <p>def raiz(usuario):</p> <pre><code>...\n</code></pre>"},{"location":"utils/autenticator/#utils.authenticator.Autenticator.__call__","title":"__call__","text":"<pre><code>__call__(f)\n</code></pre> <p>Valida a autenticacao</p>"},{"location":"utils/imagens/","title":"Class Images","text":""},{"location":"utils/imagens/#utils.imagens.Imagens","title":"Imagens","text":""},{"location":"utils/imagens/#utils.imagens.Imagens.resize_image","title":"resize_image  <code>staticmethod</code>","text":"<pre><code>resize_image(filepath: str, size: tuple, new_file_path: str = None) -&gt; None\n</code></pre> <p>Redimensiona a imagem para o tamanho passado pelo argumento size e opcinalmente pode  salvar a imagem em outro caminho.</p> <p>Parameters:</p> Name Type Description Default <code>filepath</code> <code>str</code> <p>Caminho onde esta a imagem a ser redimensionado, com a imagem inclusa no path</p> required <code>size</code> <code>tuple</code> <p>Uma tupla que ir\u00e1 determinar a nova altura/largura da imagem sem perder a propor\u00e7\u00e3o original</p> required <code>new_file_path</code> <code>str</code> <p>O novo caminho (ja com o nome da imagem) onde ela deve ser salva novamente, caso n\u00e3o informado a imagem original ser\u00e1 substituida.</p> <code>None</code> <p>Examples:</p> <pre><code>&gt;&gt;&gt; Imagens.resize_image('/dados/backup/foto.png', (64,64), '/dados/backup/thumbnail/foto.png')\n</code></pre>"},{"location":"utils/imagens/#utils.imagens.Imagens.rotate_image","title":"rotate_image  <code>staticmethod</code>","text":"<pre><code>rotate_image(filepath: str, size: tuple = None, novo_nome: str = None) -&gt; bool\n</code></pre> <p>Coloca a imagem na orienta\u00e7\u00e3o correta. Fotos retiradas de c\u00e2meras  de celular quando salvas diretamente podem ficar com a orienta\u00e7\u00e3o incorreta,  para resolver isto este m\u00e9todo foi criado. Ele recebe o caminho at\u00e9 a imagem,  o tamanho (size) que se informado deve ser uma tupla e o novo_nome que nada  mais \u00e9 que o caminho para salvar a nova imagem,  isto faz com que o arquivo original n\u00e3o seja sobreescrito.</p> <p>Parameters:</p> Name Type Description Default <code>filepath</code> <code>str</code> <p>Local no sistema de arquivos onde a imagem original esta</p> required <code>size</code> <code>tuple</code> <p>Uma tupla que determina a larguraxaltura que a nova imagem ser\u00e1 salva</p> <code>None</code> <code>novo_nome</code> <code>str</code> <p>Determina um novo caminho para salvar a imagem tratada e acertada.</p> <code>None</code> <p>Examples:</p> <pre><code>&gt;&gt;&gt; Imagens.rotate_image('/dados/backup/foto.png', (64,64), '/dados/backup/thumbnail/foto.png')\nTrue\n</code></pre>"},{"location":"utils/imagens/#utils.imagens.Imagens.save_files","title":"save_files  <code>staticmethod</code>","text":"<pre><code>save_files(path_save_files: str, list_files: Flask.request_class, return_name_original: bool = False) -&gt; dict\n</code></pre> <p>Recebe um caminho e um objeto request.files onde se faz valida\u00e7\u00e3o para salvar os arquivos</p> <p>Parameters:</p> Name Type Description Default <code>path_save_files</code> <code>str</code> <p>Uma string que representa o caminho onde salvaro arquivo</p> required <code>list_files</code> <code>Flask.request_class</code> <p>Um objeto (request.files do flask) que dar\u00e1 acesso ao getlist com atributo 'arquivo' para salvar as imagens</p> required <code>return_name_original</code> <code>bool</code> <p>Um boleano que determina se o nome original do arquivo deve ser mantido</p> <code>False</code> <p>Examples:</p> <pre><code>&gt;&gt;&gt; lista_de_arquivos = request.files # Vindo de um contexto Flask com atributo do body com nome arquivo\n&gt;&gt;&gt; Imagens.save_files('/imagens/backup', lista_de_arquivos, False)\n{1: 'blablablaxsdw.png', 2: 'blublubluxsdsdf.png'}\n&gt;&gt;&gt; lista_de_arquivos = request.files # Vindo de um contexto Flask com atributo do body com nome arquivo\n&gt;&gt;&gt; Imagens.save_files('/imagens/backup', lista_de_arquivos, True)\n{1: {\n    'novo_nome': 'blablablaxsdw.png',\n    'nome_original': 'arquivo.png',\n    } \n}\n# EM UM CONTEXTO DE ERRO\n&gt;&gt;&gt; lista_de_arquivos = request.files # Vindo de um contexto Flask com atributo do body com nome arquivo mas sem arquivos\n&gt;&gt;&gt; Imagens.save_files('/imagens/backup', lista_de_arquivos, True)\n{'erro': 'Se esta tentando enviar anexo, coloque ao menos 1', 'codigo': 19}\n</code></pre>"},{"location":"utils/validator/","title":"Class Validator","text":""},{"location":"utils/validator/#utils.validator.Validator","title":"Validator","text":"<p>Usado para validar campos e criar schemas json.</p>"},{"location":"utils/validator/#utils.validator.Validator.__init__","title":"__init__","text":"<pre><code>__init__(list_validate_fields: list[ValidatorField], requireds: list[str])\n</code></pre> <p>Recebe uma lista de parametros e os campos requeridos como obrigat\u00f3rios  para montar o objeto schemajson.</p> <p>Parameters:</p> Name Type Description Default <code>list_validate_fields</code> <code>list[ValidatorField]</code> <p>Uma lista com ValidatorFields que sabem como retornar uma representa\u00e7\u00e3o de campo do schema</p> required <code>requireds</code> <code>list[str]</code> <p>Lista de campos informados como requeridos</p> required <p>Examples:</p> <pre><code>&gt;&gt;&gt; v = Validator([ ValidatorString('descricao', min = 3) ], ['descricao'])\n</code></pre>"},{"location":"utils/validator/#utils.validator.Validator.is_valid","title":"is_valid","text":"<pre><code>is_valid(data: dict, format_checker: any = None) -&gt; None\n</code></pre> <p>Verifica se o schema enviado \u00e9 valido, caso necess\u00e1rio \u00e9 poss\u00edvel incluir um format_checker  que pode ser usado para validar campos, por exemplo do tipo date. Caso algum campo n\u00e3o seja validado um ValueError \u00e9 lan\u00e7ado pelo m\u00e9todo.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>dict</code> <p>Um dicionario que representa os dados a serem validados</p> required <code>format_checker</code> <code>any</code> <p>Um validador para algum tipo de campo especifico, por exemplo campos date</p> <code>None</code> <p>Examples:</p> <pre><code>&gt;&gt;&gt; v = Validator([ ValidatorString('descricao', min = 3) ], ['descricao'])\n&gt;&gt;&gt; v.is_valid({'descricao': 'Ola mundo'})\n</code></pre> <pre><code>&gt;&gt;&gt; v2 = Validator([ ValidatorDate('data') ], ['data'], jsonschema.FormatChecker([\"date\"]))\n&gt;&gt;&gt; v2.is_valid({'data': '2023-01-01'})\n</code></pre>"},{"location":"utils/validator/#utils.validator.Validator.validate_json","title":"validate_json  <code>staticmethod</code>","text":"<pre><code>validate_json(form: any) -&gt; dict\n</code></pre> <p>Recebe um objeto do tipo request e verifica se o campo 'dados' foi  enviado, e se o mesmo \u00e9 um JSON.</p> <p>Parameters:</p> Name Type Description Default <code>form</code> <code>any</code> <p>Um parametro request dentro do contexto do Flask</p> required <p>Examples:</p> <pre><code>&gt;&gt;&gt; Validator.validate_json(request) # O request do form contendo um body com 'dados' e um JSON.\n{'de': '2023', 'ate': '2023', 'grupos': '1', 'lojas': '1'}\n</code></pre> <p>Caso o form n\u00e3o atenda ao padr\u00e3o um retorno dict com atributo erro \u00e9 recebido</p> <pre><code>&gt;&gt;&gt; Validator.validate_json(request) # \n{\"erro\": \"ESPERADO UM ATRIBUTO DADOS QUE NAO EXISTE\", \"codigo\": 1}\n</code></pre>"},{"location":"utils/validator/#utils.validator.ValidatorDate","title":"ValidatorDate","text":"<p>         Bases: <code>ValidatorField</code></p> <p>Classe usada para criar o validador jsonschema para datas</p>"},{"location":"utils/validator/#utils.validator.ValidatorDate.__init__","title":"__init__","text":"<pre><code>__init__(name: str, msg_error: str = '') -&gt; None\n</code></pre> <p>Recebe o nome e opcionalmente uma mensagem de erro  chamada pelo validador.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>Uma string que representa o nome do campo do schema a ser validado</p> required <code>msg_error</code> <code>str</code> <p>Mensagem de erro a ser acionada pelo validador caso o valor seja invalido.</p> <code>''</code> <p>Examples:</p> <pre><code>&gt;&gt;&gt; v = ValidatorDate('data', 'Idade n\u00e3o permitida')\n</code></pre>"},{"location":"utils/validator/#utils.validator.ValidatorDate.to_schema","title":"to_schema","text":"<pre><code>to_schema() -&gt; dict\n</code></pre> <p>Retorna o dicionario do schemajson</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; v = ValidatorDate('data')\n&gt;&gt;&gt; v.to_schema()\n&gt;&gt;&gt; { \"data\": { \"type\": \"string\", \"format\": \"date\" } }\n</code></pre>"},{"location":"utils/validator/#utils.validator.ValidatorEnum","title":"ValidatorEnum","text":"<p>         Bases: <code>ValidatorField</code></p> <p>Classe usada para criar o validador jsonschema para enumeradores</p>"},{"location":"utils/validator/#utils.validator.ValidatorEnum.__init__","title":"__init__","text":"<pre><code>__init__(name: str, enum: list, msg_error: str = '') -&gt; None\n</code></pre> <p>Recebe o nome e o enumerador, e opcionalmente uma mensagem de erro  chamada pelo validador.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>Uma string que representa o nome do campo do schema a ser validado</p> required <code>msg_error</code> <code>str</code> <p>Mensagem de erro a ser acionada pelo validador caso o valor seja invalido.</p> <code>''</code> <code>enum</code> <code>list</code> <p>lista de valores a serem comparados para valida\u00e7\u00e3o</p> required <p>Examples:</p> <pre><code>&gt;&gt;&gt; v = ValidatorEnum('status', ['A', 'B', 'C'], 'Valor nao aceito')\n</code></pre>"},{"location":"utils/validator/#utils.validator.ValidatorEnum.to_schema","title":"to_schema","text":"<pre><code>to_schema() -&gt; dict\n</code></pre> <p>Retorna o dicionario do schemajson.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; v = ValidatorEnum('status', ['A', 'B', 'C'])\n&gt;&gt;&gt; v.to_schema()\n&gt;&gt;&gt; { \"status\": {\"type\": \"string\", \"enum\":  ['A', 'B', 'C'] } }\n</code></pre>"},{"location":"utils/validator/#utils.validator.ValidatorField","title":"ValidatorField","text":"<p>         Bases: <code>ABC</code></p> <p>Classe abstrata que serve como base para criar validadores  afim de retornar schemas do jsonschema vers\u00e3o do Draft-7</p>"},{"location":"utils/validator/#utils.validator.ValidatorField.to_error_msg","title":"to_error_msg","text":"<pre><code>to_error_msg() -&gt; str\n</code></pre> <p>Retorna uma mensagem de erro que foi atribuida ao validador.</p>"},{"location":"utils/validator/#utils.validator.ValidatorField.to_schema","title":"to_schema","text":"<pre><code>to_schema() -&gt; dict\n</code></pre> <p>Retorna um dicion\u00e1rio que \u00e9 a representa\u00e7\u00e3o do schema</p>"},{"location":"utils/validator/#utils.validator.ValidatorNumber","title":"ValidatorNumber","text":"<p>         Bases: <code>ValidatorField</code></p> <p>Classe usada para criar o validador jsonschema para numeros</p>"},{"location":"utils/validator/#utils.validator.ValidatorNumber.__init__","title":"__init__","text":"<pre><code>__init__(name: str, min: int = None, max: int = None, msg_error: str = '') -&gt; None\n</code></pre> <p>Recebe o nome e opcionalmente os valores min e max, al\u00e9m de uma mensagem de erro,  que caso inserida ser\u00e1 chamada pelo validador.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>Uma string que representa o nome do campo do schema a ser validado</p> required <code>msg_error</code> <code>str</code> <p>Mensagem de erro a ser acionada pelo validador caso o valor seja invalido.</p> <code>''</code> <code>min</code> <code>int</code> <p>Valor minimo aceito</p> <code>None</code> <code>max</code> <code>int</code> <p>Valor maximo aceito</p> <code>None</code> <p>Examples:</p> <pre><code>&gt;&gt;&gt; v = ValidatorNumber('idade', min = 18, max = 99, msg_error = 'Idade n\u00e3o permitida')\n</code></pre>"},{"location":"utils/validator/#utils.validator.ValidatorNumber.to_schema","title":"to_schema","text":"<pre><code>to_schema() -&gt; dict\n</code></pre> <p>Retorna o dicionario do schemajson</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; v = ValidatorNumber('idade', min = 18, max = 99)\n&gt;&gt;&gt; v.to_schema()\n&gt;&gt;&gt; { \"idade\": {\"type\": \"string\", \"minimum\": 18, \"maximum\": 99 } }\n</code></pre>"},{"location":"utils/validator/#utils.validator.ValidatorRegex","title":"ValidatorRegex","text":"<p>         Bases: <code>ValidatorField</code></p> <p>Classe usada para criar jsonschema de valida\u00e7\u00e3o de um regex</p>"},{"location":"utils/validator/#utils.validator.ValidatorRegex.__init__","title":"__init__","text":"<pre><code>__init__(name: str, regex: str, msg_error: str = '') -&gt; None\n</code></pre> <p>Recebe o nome, a express\u00e3o regular (string) e opcionalmente uma mensagem de erro,  que caso inserida ser\u00e1 chamada pelo validador.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>Uma string que representa o nome do campo do schema a ser validado</p> required <code>regex</code> <code>str</code> <p>Uma express\u00e3o regular para ser tratada na valida\u00e7\u00e3o do campo</p> required <code>msg_error</code> <code>str</code> <p>Mensagem de erro a ser acionada pelo validador caso o valor seja invalido.</p> <code>''</code> <p>Examples:</p> <pre><code>&gt;&gt;&gt; v = ValidatorRegex('telefone', regex = '\\([0-9]{2}\\)9[0-9]{4}-[0-9]{4}', msg_error = 'Express\u00e3o n\u00e3o validada')\n</code></pre>"},{"location":"utils/validator/#utils.validator.ValidatorRegex.to_schema","title":"to_schema","text":"<pre><code>to_schema() -&gt; dict\n</code></pre> <p>Retorna o dicionario do schemajson</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; v = ValidatorRegex('telefone', regex = '\\([0-9]{2}\\)9[0-9]{4}-[0-9]{4}')\n&gt;&gt;&gt; v.to_schema()\n&gt;&gt;&gt; {\"telefone\": {\"type\": \"string\", \"format\": \"regex\", \"pattern\": \"\\([0-9]{2}\\)9[0-9]{4}-[0-9]{4}\"} }\n</code></pre>"},{"location":"utils/validator/#utils.validator.ValidatorString","title":"ValidatorString","text":"<p>         Bases: <code>ValidatorField</code></p> <p>Classe usada para criar o validador jsonschema para strings</p>"},{"location":"utils/validator/#utils.validator.ValidatorString.__init__","title":"__init__","text":"<pre><code>__init__(name: str, min: int = None, max: int = None, msg_error: str = '') -&gt; None\n</code></pre> <p>Recebe o nome e opcionalmente os valores min e max, al\u00e9m de uma mensagem de erro,  que caso inserida ser\u00e1 chamada pelo validador.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>Uma string que representa o nome do campo do schema a ser validado</p> required <code>msg_error</code> <code>str</code> <p>Mensagem de erro a ser acionada pelo validador caso o valor seja invalido.</p> <code>''</code> <code>min</code> <code>int</code> <p>Quantidade minima de caracteres aceitos</p> <code>None</code> <code>max</code> <code>int</code> <p>Quantidade maxima de caracteres aceitos</p> <code>None</code> <p>Examples:</p> <pre><code>&gt;&gt;&gt; v = ValidatorString('descricao', min = 1, max = 10, msg_error = 'Quantidade minima de 1 caractere e maxima de 10')\n</code></pre>"},{"location":"utils/validator/#utils.validator.ValidatorString.to_schema","title":"to_schema","text":"<pre><code>to_schema() -&gt; dict\n</code></pre> <p>Retorna o dicionario do schemajson</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; v = ValidatorString('descricao', min = 3, max = 10)\n&gt;&gt;&gt; v.to_schema()\n&gt;&gt;&gt; { \"descricao\": {\"type\": \"string\", \"minLength\": 3, \"maxLength\": 10 } }\n</code></pre>"}]}